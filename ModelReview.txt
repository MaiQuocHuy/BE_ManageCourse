1. Danh sách nghiệp vụ (Business Requirements)
Dựa trên Review Model và các phương thức được mô tả trong tài liệu (createReview, getReviewById, getUserReviewForCourse, updateReview, deleteReview, addInstructorResponse, getCourseReviews, getAverageRating, getRatingDistribution, getInstructorReviews, getHighestRatedCourses), các nghiệp vụ cần thực hiện bao gồm:

- Tạo hoặc cập nhật đánh giá (Create/Update Review):
  - Cho phép học viên tạo hoặc cập nhật đánh giá và xếp hạng cho một khóa học đã đăng ký.
  - Đảm bảo học viên chỉ có thể đánh giá một lần cho mỗi khóa học.
  - Yêu cầu xác thực JWT và kiểm tra trạng thái đăng ký khóa học.

- Lấy thông tin đánh giá (Get Review Info):
  - Lấy thông tin đánh giá theo ID, bao gồm thông tin người dùng.
  - Hỗ trợ truy cập bởi học viên, giảng viên sở hữu khóa học, hoặc admin.

- Kiểm tra đánh giá của học viên cho khóa học (Get User Review for Course):
  - Kiểm tra xem học viên đã đánh giá một khóa học cụ thể chưa.
  - Yêu cầu xác thực JWT.

- Cập nhật đánh giá (Update Review):
  - Cập nhật xếp hạng hoặc nội dung đánh giá.
  - Chỉ học viên đã tạo đánh giá được phép thực thi, sử dụng transaction để đảm bảo tính toàn vẹn dữ liệu.

- Xóa đánh giá (Delete Review):
  - Xóa đánh giá, chỉ học viên đã tạo đánh giá được phép thực thi.
  - Sử dụng transaction để đảm bảo tính toàn vẹn dữ liệu.

- Thêm phản hồi của giảng viên (Add Instructor Response):
  - Cho phép giảng viên phản hồi lại đánh giá của học viên.
  - Chỉ giảng viên sở hữu khóa học được phép thực thi, sử dụng transaction để đảm bảo tính toàn vẹn dữ liệu.

- Lấy danh sách đánh giá của khóa học (Get Course Reviews):
  - Lấy tất cả đánh giá của một khóa học, hỗ trợ phân trang và lọc (ví dụ: theo xếp hạng).
  - Hỗ trợ truy cập công khai.

- Tính xếp hạng trung bình (Get Average Rating):
  - Tính xếp hạng trung bình của một khóa học dựa trên tất cả đánh giá.
  - Hỗ trợ truy cập công khai.

- Lấy phân bố xếp hạng (Get Rating Distribution):
  - Cung cấp thống kê số lượng đánh giá theo từng mức xếp hạng (1-5 sao) cho một khóa học.
  - Hỗ trợ truy cập công khai.

- Lấy đánh giá của giảng viên (Get Instructor Reviews):
  - Lấy tất cả đánh giá cho các khóa học của một giảng viên cụ thể.
  - Chỉ giảng viên hoặc admin được phép truy cập, hỗ trợ phân trang.

- Lấy khóa học có xếp hạng cao nhất (Get Highest Rated Courses):
  - Lấy danh sách khóa học được sắp xếp theo xếp hạng trung bình.
  - Hỗ trợ truy cập công khai, hỗ trợ phân trang.

2. Tech Stack
Để triển khai các API này, tôi đề xuất tech stack sau, đồng bộ với User Model, Category Model, Course Model, Section Model, Lesson Model, Enrollment Model, và Payment Model, không sử dụng Redis, hỗ trợ transaction:

- Backend:
  - Ngôn ngữ: TypeScript với Node.js (đảm bảo type safety và dễ bảo trì).
  - Framework: Express.js (nhẹ, linh hoạt, phổ biến cho REST API).
  - ORM/Database Driver:
    - Sequenlize để quản lý truy vấn MySQL, hỗ trợ transaction.
    - mysql2 cho kết nối MySQL.
  - Validation:
    - joi: Kiểm tra dữ liệu đầu vào.
  - Authentication:
    - jsonwebtoken: Tạo và xác thực JWT (cho các API yêu cầu admin/instructor/student).
  - Rate Limiting:
    - express-rate-limit: Giới hạn số lượng yêu cầu để tránh spam (ví dụ: tránh tạo nhiều đánh giá đồng thời).
  - Documentation:
    - swagger-jsdoc và swagger-ui-express: Tạo tài liệu OpenAPI.
    - express-openapi-validator: Validate request/response theo spec.

- Database:
  - MySQL: Dựa trên schema đã cung cấp (reviews).

- DevOps:
  - Docker: Container hóa ứng dụng.
  - PM2: Quản lý process trong production.
  - Nginx: Reverse proxy và load balancing.
  - CI/CD: GitHub Actions để tự động test và deploy.

- Monitoring & Logging:
  - Winston: Ghi log.
  - Prometheus + Grafana: Giám sát hiệu suất API.
  - Sentry: Theo dõi lỗi.

- Testing:
  - Jest: Unit test và integration test.
  - Supertest: Test API endpoints.
  - Postman hoặc Thunder Client: Manual testing.

- Môi trường phát triển:
  - VS Code: IDE với các extension TypeScript, ESLint, Prettier.
  - ESLint + Prettier: Đảm bảo code style nhất quán.
  - Husky: Pre-commit hooks để chạy lint và test.

3. Danh sách API chi tiết
Dưới đây là danh sách các API cho Review Model, bao gồm endpoint, phương thức HTTP, mô tả, yêu cầu xác thực, và các lưu ý tối ưu hóa.

- Endpoint: /api/reviews
  - Method: POST
  - Description: Tạo hoặc cập nhật đánh giá
  - Auth: JWT (Student)
  - Notes: Kiểm tra trạng thái đăng ký, sử dụng transaction để đảm bảo tính toàn vẹn, áp dụng rate limiting để tránh spam.

- Endpoint: /api/reviews/:id
  - Method: GET
  - Description: Lấy thông tin đánh giá theo ID
  - Auth: None
  - Notes: Tối ưu bằng cách chọn cột cụ thể.

- Endpoint: /api/reviews/course/:courseId/user
  - Method: GET
  - Description: Kiểm tra đánh giá của học viên cho khóa học
  - Auth: JWT (Student)
  - Notes: Tối ưu bằng cách chọn cột cụ thể.

- Endpoint: /api/reviews/:id
  - Method: PUT
  - Description: Cập nhật đánh giá
  - Auth: JWT (Student)
  - Notes: Kiểm tra quyền sở hữu đánh giá, sử dụng transaction để đảm bảo tính toàn vẹn.

- Endpoint: /api/reviews/:id
  - Method: DELETE
  - Description: Xóa đánh giá
  - Auth: JWT (Student)
  - Notes: Kiểm tra quyền sở hữu đánh giá, sử dụng transaction để đảm bảo tính toàn vẹn.

- Endpoint: /api/reviews/:id/response
  - Method: POST
  - Description: Thêm phản hồi của giảng viên
  - Auth: JWT (Instructor)
  - Notes: Kiểm tra quyền sở hữu khóa học, sử dụng transaction để đảm bảo tính toàn vẹn.

- Endpoint: /api/reviews/course/:courseId
  - Method: GET
  - Description: Lấy danh sách đánh giá của khóa học
  - Auth: None
  - Notes: Hỗ trợ phân trang và lọc, tối ưu bằng cách chọn cột cụ thể.

- Endpoint: /api/reviews/course/:courseId/average
  - Method: GET
  - Description: Tính xếp hạng trung bình
  - Auth: None
  - Notes: Tối ưu bằng cách sử dụng truy vấn tổng hợp hiệu quả.

- Endpoint: /api/reviews/course/:courseId/distribution
  - Method: GET
  - Description: Lấy phân bố xếp hạng
  - Auth: None
  - Notes: Tối ưu bằng cách sử dụng truy vấn tổng hợp hiệu quả.

- Endpoint: /api/reviews/instructor/:instructorId
  - Method: GET
  - Description: Lấy đánh giá của giảng viên
  - Auth: JWT (Instructor hoặc Admin)
  - Notes: Hỗ trợ phân trang, tối ưu bằng cách sử dụng JOIN hiệu quả.

- Endpoint: /api/reviews/highest-rated
  - Method: GET
  - Description: Lấy khóa học có xếp hạng cao nhất
  - Auth: None
  - Notes: Hỗ trợ phân trang, tối ưu bằng cách sử dụng JOIN hiệu quả.

4. Các bước triển khai chi tiết

4.1. Tạo hoặc cập nhật đánh giá (/api/reviews)
- Input: { user_id, course_id, rating, review_text }.
- Xử lý:
  - Validate input bằng zod (user_id, course_id, rating bắt buộc, rating từ 1-5).
  - Áp dụng rate limiting (express-rate-limit) để giới hạn số yêu cầu từ cùng một user_id (ví dụ: 5 yêu cầu/phút).
  - Kiểm tra học viên đã đăng ký khóa học (liên kết với Enrollment Model).
  - Kiểm tra xem học viên đã đánh giá khóa học chưa (getUserReviewForCourse).
  - Bắt đầu transaction:
    - Nếu chưa có đánh giá, tạo bản ghi mới trong bảng reviews (createReview).
    - Nếu đã có đánh giá, cập nhật bản ghi hiện có (updateReview).
  - Commit transaction nếu thành công, rollback nếu có lỗi.
- Output: { id, user_id, course_id, rating, review_text }.

4.2. Lấy thông tin đánh giá (/api/reviews/:id)
- Input: :id.
- Xử lý:
  - Truy vấn bảng reviews để lấy thông tin đánh giá (getReviewById).
  - Chọn cột cụ thể để giảm tải xử lý.
- Output: { id, user_id, course_id, rating, review_text, instructor_response, response_date }.

4.3. Kiểm tra đánh giá của học viên cho khóa học (/api/reviews/course/:courseId/user)
- Input: :courseId.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền học viên.
  - Truy vấn bảng reviews để kiểm tra đánh giá (getUserReviewForCourse).
  - Chọn cột cụ thể để giảm tải xử lý.
- Output: { id, user_id, course_id, rating, review_text } hoặc { reviewed: false }.

4.4. Cập nhật đánh giá (/api/reviews/:id)
- Input: { rating, review_text }.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền học viên và quyền sở hữu đánh giá.
  - Validate input bằng zod.
  - Bắt đầu transaction:
    - Cập nhật bản ghi trong bảng reviews (updateReview).
  - Commit transaction nếu thành công, rollback nếu có lỗi.
- Output: { id, user_id, course_id, rating, review_text }.

4.5. Xóa đánh giá (/api/reviews/:id)
- Input: :id.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền học viên và quyền sở hữu đánh giá.
  - Bắt đầu transaction:
    - Xóa bản ghi trong bảng reviews (deleteReview).
  - Commit transaction nếu thành công, rollback nếu có lỗi.
- Output: { message: 'Review deleted successfully' }.

4.6. Thêm phản hồi của giảng viên (/api/reviews/:id/response)
- Input: { instructor_response }.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền giảng viên và quyền sở hữu khóa học.
  - Validate input bằng zod.
  - Bắt đầu transaction:
    - Cập nhật bản ghi trong bảng reviews với instructor_response và response_date (addInstructorResponse).
  - Commit transaction nếu thành công, rollback nếu có lỗi.
- Output: { id, user_id, course_id, rating, review_text, instructor_response, response_date }.

4.7. Lấy danh sách đánh giá của khóa học (/api/reviews/course/:courseId)
- Input: :courseId, Query params { page, limit, rating? }.
- Xử lý:
  - Truy vấn bảng reviews để lấy danh sách đánh giá (getCourseReviews).
  - Hỗ trợ phân trang và lọc theo rating.
  - Chọn cột cụ thể để giảm tải xử lý.
- Output: { reviews: [{ id, user_id, course_id, rating, review_text, instructor_response }], total: number }.

4.8. Tính xếp hạng trung bình (/api/reviews/course/:courseId/average)
- Input: :courseId.
- Xử lý:
  - Truy vấn bảng reviews để tính xếp hạng trung bình (getAverageRating).
  - Sử dụng truy vấn tổng hợp hiệu quả.
- Output: { course_id, average_rating: number }.

4.9. Lấy phân bố xếp hạng (/api/reviews/course/:courseId/distribution)
- Input: :courseId.
- Xử lý:
  - Truy vấn bảng reviews để lấy số lượng đánh giá theo từng mức rating (getRatingDistribution).
  - Sử dụng truy vấn tổng hợp hiệu quả.
- Output: { distribution: { 1: number, 2: number, 3: number, 4: number, 5: number } }.

4.10. Lấy đánh giá của giảng viên (/api/reviews/instructor/:instructorId)
- Input: :instructorId, Query params { page, limit }.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền (giảng viên hoặc admin).
  - Truy vấn bảng reviews và courses để lấy đánh giá (getInstructorReviews).
  - Hỗ trợ phân trang.
  - Sử dụng JOIN hiệu quả để lấy dữ liệu.
- Output: { reviews: [{ id, user_id, course_id, rating, review_text }], total: number }.

4.11. Lấy khóa học có xếp hạng cao nhất (/api/reviews/highest-rated)
- Input: Query params { page, limit }.
- Xử lý:
  - Truy vấn bảng reviews và courses để lấy khóa học theo xếp hạng trung bình (getHighestRatedCourses).
  - Hỗ trợ phân trang.
  - Sử dụng JOIN hiệu quả để lấy dữ liệu.
- Output: { courses: [{ course_id, title, average_rating }], total: number }.

5. Nguyên tắc thiết kế cấu trúc dự án

- Modularity: Tách biệt các thành phần (routes, controllers, services, models) để dễ bảo trì.
- Scalability: Cấu trúc hỗ trợ thêm model và tính năng mới mà không làm rối codebase.
- Separation of Concerns: Mỗi lớp (layer) xử lý một trách nhiệm cụ thể (routes định tuyến, controllers xử lý logic HTTP, services xử lý logic nghiệp vụ, models tương tác với database).
- Reusability: Các thành phần như middleware, utilities được tái sử dụng.
- Testing: Hỗ trợ viết unit test và integration test dễ dàng.
- Configuration: Tách biệt cấu hình môi trường (development, production) để dễ triển khai.

6. Nguyên tắc khi kết hợp Swagger

- Mục tiêu: Swagger (OpenAPI Specification) phải phản ánh chính xác các endpoint, request/response schema, và trạng thái của API.
- Nguyên tắc:
  - Tự động hóa tài liệu: Sử dụng các thư viện như swagger-jsdoc hoặc swagger-ui-express để tạo tài liệu Swagger trực tiếp từ mã nguồn (comments JSDoc trong Express.js).
  - Đồng bộ hóa với mã: Đảm bảo mọi thay đổi trong API (thêm endpoint, cập nhật schema) được phản ánh ngay lập tức trong tài liệu Swagger.
  - Xác thực schema: Sử dụng các công cụ như express-openapi-validator để kiểm tra tính hợp lệ của request/response so với định nghĩa trong Swagger.