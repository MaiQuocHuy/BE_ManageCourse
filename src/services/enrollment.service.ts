import { enrollmentRepository, userRepository, courseRepository } from '../repositories';
import Enrollment from '../models/enrollment.model';
import { ApiError } from '../utils/api-error';

interface PaginationOptions {
  page?: number;
  limit?: number;
  search?: string;
}

class EnrollmentService {
  /**
   * Create a new enrollment
   */
  async createEnrollment(user_id: string, course_id: string): Promise<Enrollment> {
    // Check if user is already enrolled in the course using repository
    const existingEnrollment = await this.isUserEnrolled(user_id, course_id);
    if (existingEnrollment) {
      throw new ApiError(400, 'User is already enrolled in this course');
    }

    // Check if course exists using repository
    const course = await courseRepository.findById(course_id);
    if (!course) {
      throw new ApiError(404, 'Course not found');
    }

    // Check if user exists using repository
    const user = await userRepository.findById(user_id);
    if (!user) {
      throw new ApiError(404, 'User not found');
    }

    // Create enrollment using repository
    return await enrollmentRepository.create({
      user_id,
      course_id,
    });
  }

  /**
   * Get enrollment by ID
   */
  async getEnrollmentById(id: string): Promise<Enrollment> {
    const enrollment = await enrollmentRepository.findByIdWithDetails(id);

    if (!enrollment) {
      throw new ApiError(404, 'Enrollment not found');
    }

    return enrollment;
  }

  /**
   * Check if a user is enrolled in a course
   */
  async isUserEnrolled(user_id: string, course_id: string): Promise<Enrollment | null> {
    return await enrollmentRepository.findByUserAndCourse(user_id, course_id);
  }

  /**
   * Get all courses a user is enrolled in
   */
  async getUserEnrollments(
    user_id: string,
    options: PaginationOptions = {}
  ): Promise<{ enrollments: Enrollment[]; total: number; page: number; limit: number }> {
    return await enrollmentRepository.findByUserId(user_id, options);
  }

  /**
   * Get all students enrolled in a course
   */
  async getCourseEnrollments(
    course_id: string,
    options: PaginationOptions = {}
  ): Promise<{ enrollments: Enrollment[]; total: number; page: number; limit: number }> {
    return await enrollmentRepository.findByCourseId(course_id, options);
  }

  /**
   * Calculate the total revenue generated by a course
   */
  async getCourseRevenue(course_id: string): Promise<number> {
    const course = await courseRepository.findById(course_id);
    if (!course) {
      throw new ApiError(404, 'Course not found');
    }

    const enrollmentCount = await enrollmentRepository.count({
      where: { course_id },
    });

    // Calculate revenue (price * number of enrollments)
    return Number(course.price) * enrollmentCount;
  }

  /**
   * Get the number of unique students enrolled in an instructor's courses
   */
  async getStudentCountByInstructor(instructor_id: string): Promise<number> {
    return await enrollmentRepository.getStudentCountByInstructor(instructor_id);
  }

  /**
   * Get the most popular courses based on enrollment count
   */
  async getMostPopularCourses(
    options: PaginationOptions = {}
  ): Promise<{ courses: any[]; total: number; page: number; limit: number }> {
    return await enrollmentRepository.getMostPopularCourses(options);
  }
}

export default new EnrollmentService();
