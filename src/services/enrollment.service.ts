import { Op } from "sequelize";
import Enrollment from "../models/enrollment.model";
import Course from "../models/course.model";
import User from "../models/user.model";
import Section from "../models/section.model";
import Lesson from "../models/lesson.model";
import { ApiError } from "../utils/api-error";
import sequelize from "../config/database";

interface PaginationOptions {
  page?: number;
  limit?: number;
  search?: string;
}

class EnrollmentService {
  /**
   * Create a new enrollment
   */
  async createEnrollment(
    user_id: string,
    course_id: string
  ): Promise<Enrollment> {
    // Check if user is already enrolled in the course
    const existingEnrollment = await this.isUserEnrolled(user_id, course_id);
    if (existingEnrollment) {
      throw new ApiError(400, "User is already enrolled in this course");
    }

    // Check if course exists
    const course = await Course.findByPk(course_id);
    if (!course) {
      throw new ApiError(404, "Course not found");
    }

    // Check if user exists
    const user = await User.findByPk(user_id);
    if (!user) {
      throw new ApiError(404, "User not found");
    }

    // Create enrollment
    return await Enrollment.create({
      user_id,
      course_id,
    });
  }

  /**
   * Get enrollment by ID
   */
  async getEnrollmentById(id: string): Promise<Enrollment> {
    const enrollment = await Enrollment.findByPk(id, {
      include: [
        {
          model: User,
          as: "student",
          attributes: ["id", "name", "email", "profile_thumbnail"],
        },
        {
          model: Course,
          as: "course",
          attributes: ["id", "title", "thumbnail", "price"],
        },
      ],
    });

    if (!enrollment) {
      throw new ApiError(404, "Enrollment not found");
    }

    return enrollment;
  }

  /**
   * Check if a user is enrolled in a course
   */
  async isUserEnrolled(
    user_id: string,
    course_id: string
  ): Promise<Enrollment | null> {
    return await Enrollment.findOne({
      where: {
        user_id,
        course_id,
      },
    });
  }

  /**
   * Get all courses a user is enrolled in
   */
  async getUserEnrollments(
    user_id: string,
    options: PaginationOptions = {}
  ): Promise<{ enrollments: Enrollment[]; total: number; page: number; limit: number }> {
    const { page = 1, limit = 10, search } = options;
    const offset = (page - 1) * limit;

    let whereClause: any = { user_id };
    let courseWhereClause: any = {};

    if (search) {
      courseWhereClause = {
        title: { [Op.like]: `%${search}%` },
      };
    }

    const { count, rows } = await Enrollment.findAndCountAll({
      where: whereClause,
      include: [
        {
          model: Course,
          as: "course",
          where: courseWhereClause,
          attributes: [
            "id",
            "title",
            "description",
            "thumbnail",
            "price",
            "is_published",
          ],
          include: [
            {
              model: User,
              as: "instructor",
              attributes: ["id", "name", "profile_thumbnail"],
            },
          ],
        },
      ],
      limit,
      offset,
      distinct: true,
      order: [["created_at", "DESC"]],
    });

    return {
      enrollments: rows,
      total: count,
      page,
      limit,
    };
  }

  /**
   * Get all students enrolled in a course
   */
  async getCourseEnrollments(
    course_id: string,
    options: PaginationOptions = {}
  ): Promise<{ enrollments: Enrollment[]; total: number; page: number; limit: number }> {
    const { page = 1, limit = 10, search } = options;
    const offset = (page - 1) * limit;

    let whereClause: any = { course_id };
    let userWhereClause: any = {};

    if (search) {
      userWhereClause = {
        [Op.or]: [
          { name: { [Op.like]: `%${search}%` } },
          { email: { [Op.like]: `%${search}%` } },
        ],
      };
    }

    const { count, rows } = await Enrollment.findAndCountAll({
      where: whereClause,
      include: [
        {
          model: User,
          as: "student",
          where: userWhereClause,
          attributes: ["id", "name", "email", "profile_thumbnail"],
        },
      ],
      limit,
      offset,
      distinct: true,
      order: [["created_at", "DESC"]],
    });

    return {
      enrollments: rows,
      total: count,
      page,
      limit,
    };
  }

  /**
   * Calculate the total revenue generated by a course
   */
  async getCourseRevenue(course_id: string): Promise<number> {
    const course = await Course.findByPk(course_id);
    if (!course) {
      throw new ApiError(404, "Course not found");
    }

    const enrollmentCount = await Enrollment.count({
      where: { course_id },
    });

    // Calculate revenue (price * number of enrollments)
    return Number(course.price) * enrollmentCount;
  }

  /**
   * Get the number of unique students enrolled in an instructor's courses
   */
  async getStudentCountByInstructor(instructor_id: string): Promise<number> {
    // Get all courses by the instructor
    const courses = await Course.findAll({
      where: { instructor_id },
      attributes: ["id"],
    });

    if (courses.length === 0) {
      return 0;
    }

    const courseIds = courses.map((course) => course.id);

    // Count unique students enrolled in these courses
    const uniqueStudentCount = await Enrollment.count({
      where: {
        course_id: { [Op.in]: courseIds },
      },
      attributes: [
        [sequelize.fn("DISTINCT", sequelize.col("user_id")), "user_id"],
      ],
    });

    return uniqueStudentCount;
  }

  /**
   * Get the most popular courses based on enrollment count
   */
  async getMostPopularCourses(
    options: PaginationOptions = {}
  ): Promise<{ courses: any[]; total: number; page: number; limit: number }> {
    const { page = 1, limit = 10 } = options;
    const offset = (page - 1) * limit;

    // Get courses with enrollment count
    const coursesWithCount = await Course.findAll({
      attributes: {
        include: [
          [
            sequelize.fn("COUNT", sequelize.col("enrollments.id")),
            "enrollment_count",
          ],
        ],
      },
      include: [
        {
          model: Enrollment,
          as: "enrollments",
          attributes: [],
        },
        {
          model: User,
          as: "instructor",
          attributes: ["id", "name", "profile_thumbnail"],
        },
      ],
      where: {
        is_published: true,
        is_approved: true,
      },
      group: ["Course.id"],
      order: [[sequelize.literal("enrollment_count"), "DESC"]],
      limit,
      offset,
      subQuery: false,
    });

    // Count total courses with enrollments
    const totalCoursesWithEnrollments = await Course.count({
      distinct: true,
      include: [
        {
          model: Enrollment,
          as: "enrollments",
          attributes: [],
          required: true,
        },
      ],
      where: {
        is_published: true,
        is_approved: true,
      },
    });

    return {
      courses: coursesWithCount,
      total: totalCoursesWithEnrollments,
      page,
      limit,
    };
  }
}

export default new EnrollmentService();
