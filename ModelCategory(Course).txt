1. Danh sách nghiệp vụ (Business Requirements)
Dựa trên Category Model và các phương thức được mô tả trong tài liệu (initCategoryTable, initCategoryCoursesTable, createCategory, getCategoryById, getCategoryBySlug, getAllCategories, getCategoryHierarchy, updateCategory, deleteCategory, addDefaultCategories, associateCourseWithCategory, disassociateCourseFromCategory, getCategoriesForCourse, getPrimaryCategoryForCourse, getCoursesForCategory, getCategoryCounts), các nghiệp vụ cần thực hiện bao gồm:

- Khởi tạo bảng danh mục (Initialize Tables):
  - Tạo bảng categories và course_categories nếu chưa tồn tại để lưu trữ danh mục và mối quan hệ nhiều-nhiều với khóa học.
  - Chỉ admin được phép thực thi, thường chạy một lần khi khởi tạo hệ thống.

- Tạo danh mục mới (Create Category):
  - Cho phép admin tạo danh mục với thông tin cơ bản (name, slug, description, parent_id, display_order, is_active).
  - Tự động tạo slug từ tên để đảm bảo URL thân thiện.
  - Kiểm tra tính hợp lệ của parent_id (nếu có).

- Lấy thông tin danh mục (Get Category Info):
  - Lấy thông tin danh mục theo ID hoặc slug.
  - Hỗ trợ truy cập công khai (không yêu cầu xác thực) để hiển thị trên front-end.

- Cập nhật danh mục (Update Category):
  - Cập nhật thông tin danh mục như tên, slug, mô tả, thứ tự hiển thị, hoặc trạng thái hoạt động.
  - Kiểm tra quyền admin và tính hợp lệ của parent_id.

- Xóa danh mục (Delete Category):
  - Xóa danh mục và chuyển parent_id của các danh mục con thành null.
  - Xóa các liên kết trong bảng course_categories.
  - Chỉ admin được phép thực thi.

- Lấy danh sách danh mục (List Categories):
  - Lấy tất cả danh mục với phân trang và lọc theo parent_id.
  - Hỗ trợ truy cập công khai.

- Lấy cấu trúc phân cấp danh mục (Get Category Hierarchy):
  - Xây dựng cây danh mục (hierarchical structure) để hiển thị dạng cây trên front-end.

- Liên kết khóa học với danh mục (Associate Course with Category):
  - Liên kết một khóa học với một hoặc nhiều danh mục.
  - Hỗ trợ đặt danh mục chính (primary category).
  - Chỉ instructor sở hữu khóa học hoặc admin được phép thực thi.

- Xóa liên kết khóa học và danh mục (Disassociate Course from Category):
  - Xóa mối quan hệ giữa khóa học và danh mục.
  - Chỉ instructor sở hữu khóa học hoặc admin được phép thực thi.

- Lấy danh mục của khóa học (Get Categories for Course):
  - Lấy danh sách danh mục liên kết với một khóa học.
  - Hỗ trợ truy cập công khai.

- Lấy danh mục chính của khóa học (Get Primary Category for Course):
  - Lấy danh mục chính của một khóa học.
  - Hỗ trợ truy cập công khai.

- Lấy khóa học theo danh mục (Get Courses for Category):
  - Lấy danh sách khóa học thuộc một danh mục, hỗ trợ bao gồm danh mục con.
  - Hỗ trợ phân trang và truy cập công khai.

- Thống kê số lượng khóa học (Get Category Counts):
  - Lấy số lượng khóa học trong mỗi danh mục để hiển thị thống kê.

- Thêm danh mục mặc định (Add Default Categories):
  - Thêm một bộ danh mục mặc định khi khởi tạo hệ thống.
  - Chỉ admin được phép thực thi.

2. Tech Stack
Để triển khai các API này, tôi đề xuất tech stack sau, đồng bộ với User Model nhưng không sử dụng Redis:

- Backend:
  - Ngôn ngữ: TypeScript với Node.js (đảm bảo type safety và dễ bảo trì).
  - Framework: Express.js (nhẹ, linh hoạt, phổ biến cho REST API).
  - ORM/Database Driver:
    - Sequenlize để quản lý truy vấn MySQL.
    - mysql2 cho kết nối MySQL.
  - Validation:
    - joi: Kiểm tra dữ liệu đầu vào.
  - Authentication:
    - jsonwebtoken: Tạo và xác thực JWT (cho các API yêu cầu admin/instructor).
  - Documentation:
    - swagger-jsdoc và swagger-ui-express: Tạo tài liệu OpenAPI.
    - express-openapi-validator: Validate request/response theo spec.

- Database:
  - MySQL: Dựa trên schema đã cung cấp (categories, course_categories).
3. Danh sách API chi tiết
Dưới đây là danh sách các API cho Category Model, bao gồm endpoint, phương thức HTTP, mô tả, yêu cầu xác thực, và các lưu ý tối ưu hóa.

- Endpoint: /api/categories/init
  - Method: POST
  - Description: Khởi tạo bảng categories và course_categories
  - Auth: JWT (Admin)
  - Notes: Chỉ chạy một lần, kiểm tra bảng tồn tại.

- Endpoint: /api/categories
  - Method: POST
  - Description: Tạo danh mục mới
  - Auth: JWT (Admin)
  - Notes: Tự động tạo slug, kiểm tra parent_id.

- Endpoint: /api/categories/:id
  - Method: GET
  - Description: Lấy danh mục theo ID
  - Auth: None
  - Notes: Tối ưu bằng cách chọn cột cụ thể.

- Endpoint: /api/categories/slug/:slug
  - Method: GET
  - Description: Lấy danh mục theo slug
  - Auth: None
  - Notes: Tối ưu bằng cách chọn cột cụ thể.

- Endpoint: /api/categories
  - Method: GET
  - Description: Lấy tất cả danh mục (phân trang, lọc theo parent_id)
  - Auth: None
  - Notes: Hỗ trợ phân trang và lọc.

- Endpoint: /api/categories/hierarchy
  - Method: GET
  - Description: Lấy cấu trúc phân cấp danh mục
  - Auth: None
  - Notes: Tối ưu bằng cách tải tất cả danh mục một lần.

- Endpoint: /api/categories/:id
  - Method: PUT
  - Description: Cập nhật danh mục
  - Auth: JWT (Admin)
  - Notes: Kiểm tra parent_id, cập nhật slug nếu cần.

- Endpoint: /api/categories/:id
  - Method: DELETE
  - Description: Xóa danh mục
  - Auth: JWT (Admin)
  - Notes: Chuyển parent_id của danh mục con thành null.

- Endpoint: /api/categories/default
  - Method: POST
  - Description: Thêm danh mục mặc định
  - Auth: JWT (Admin)
  - Notes: Chỉ chạy khi khởi tạo hệ thống.

- Endpoint: /api/categories/course/:courseId
  - Method: POST
  - Description: Liên kết khóa học với danh mục
  - Auth: JWT (Instructor hoặc Admin)
  - Notes: Kiểm tra quyền sở hữu khóa học.

- Endpoint: /api/categories/course/:courseId
  - Method: DELETE
  - Description: Xóa liên kết khóa học và danh mục
  - Auth: JWT (Instructor hoặc Admin)
  - Notes: Kiểm tra quyền sở hữu khóa học.

- Endpoint: /api/categories/course/:courseId
  - Method: GET
  - Description: Lấy danh mục của khóa học
  - Auth: None
  - Notes: Tối ưu bằng cách chọn cột cụ thể.

- Endpoint: /api/categories/course/:courseId/primary
  - Method: GET
  - Description: Lấy danh mục chính của khóa học
  - Auth: None
  - Notes: Tối ưu bằng cách chọn cột cụ thể.

- Endpoint: /api/courses/category/:categoryId
  - Method: GET
  - Description: Lấy khóa học thuộc danh mục (hỗ trợ danh mục con)
  - Auth: None
  - Notes: Hỗ trợ phân trang.

- Endpoint: /api/categories/counts
  - Method: GET
  - Description: Lấy số lượng khóa học mỗi danh mục
  - Auth: None
  - Notes: Tối ưu bằng cách sử dụng JOIN hiệu quả.

4. Các bước triển khai chi tiết

4.1. Khởi tạo bảng danh mục (/api/categories/init)
- Input: None.
- Xử lý:
  - Thực thi truy vấn SQL để tạo bảng categories và course_categories (initCategoryTable, initCategoryCoursesTable).
  - Kiểm tra bảng đã tồn tại để tránh lỗi.
- Output: { message: 'Tables initialized successfully' }.

4.2. Tạo danh mục mới (/api/categories)
- Input: { name, description, parent_id, display_order, is_active }.
- Xử lý:
  - Validate input bằng zod (name bắt buộc, slug duy nhất).
  - Tạo slug tự động từ tên (dùng slugify).
  - Kiểm tra parent_id hợp lệ nếu có.
  - Thêm bản ghi vào bảng categories (createCategory).
- Output: { id, name, slug, description, parent_id, display_order, is_active }.

4.3. Lấy danh mục theo ID hoặc Slug (/api/categories/:id, /api/categories/slug/:slug)
- Input: :id hoặc :slug.
- Xử lý:
  - Tìm danh mục bằng ID (getCategoryById) hoặc slug (getCategoryBySlug).
  - Chọn cột cụ thể để giảm tải xử lý.
- Output: { id, name, slug, description, parent_id, display_order, is_active }.

4.4. Lấy tất cả danh mục (/api/categories)
- Input: Query params { page, limit, parent_id? }.
- Xử lý:
  - Truy vấn danh sách danh mục với phân trang và lọc theo parent_id (getAllCategories).
- Output: { categories: [{ id, name, slug, ... }], total: number }.

4.5. Lấy cấu trúc phân cấp danh mục (/api/categories/hierarchy)
- Input: None.
- Xử lý:
  - Xây dựng cây danh mục từ danh sách phẳng (getCategoryHierarchy).
  - Tải tất cả danh mục một lần để giảm số lần truy vấn.
- Output: { hierarchy: [{ id, name, children: [{ ... }] }] }.

4.6. Cập nhật danh mục (/api/categories/:id)
- Input: { name, description, parent_id, display_order, is_active }.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền admin.
  - Validate input bằng zod.
  - Cập nhật bản ghi trong bảng categories (updateCategory).
  - Cập nhật slug nếu tên thay đổi.
- Output: { id, name, slug, description, parent_id, display_order, is_active }.

4.7. Xóa danh mục (/api/categories/:id)
- Input: :id.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền admin.
  - Xóa danh mục và cập nhật parent_id của danh mục con thành null (deleteCategory).
  - Xóa liên kết trong bảng course_categories.
- Output: { message: 'Category deleted successfully' }.

4.8. Thêm danh mục mặc định (/api/categories/default)
- Input: None hoặc danh sách danh mục mặc định.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền admin.
  - Thêm danh mục mặc định vào bảng categories (addDefaultCategories).
  - Kiểm tra danh mục đã tồn tại để tránh trùng lặp.
- Output: { message: 'Default categories added successfully' }.

4.9. Liên kết khóa học với danh mục (/api/categories/course/:courseId)
- Input: { category_id? }.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền instructor/admin và quyền sở hữu khóa học.
  - Thêm bản ghi vào bảng course_categories (associateCourseWithCategory).
- Output: { message: 'Course associated with category' }.

4.10. Xóa liên kết khóa học và danh mục (/api/categories/course/:courseId)
- Input: { category_id }.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền instructor/admin và quyền sở hữu khóa học.
  - Xóa bản ghi trong bảng course_categories (disassociateCourseFromCategory).
- Output: { message: 'Course disassociated from category' }.

4.11. Lấy danh mục của khóa học (/api/categories/course/:courseId)
- Input: :courseId.
- Xử lý:
  - Truy vấn bảng course_categories để lấy danh mục (getCategoriesForCourse).
  - Chọn cột cụ thể để giảm tải xử lý.
- Output: { categories: [{ id, name, slug, ... }] }.

4.12. Lấy danh mục chính của khóa học (/api/categories/course/:courseId/primary)
- Input: :courseId.
- Xử lý:
  - Truy vấn bảng course_categories để lấy danh mục chính (getPrimaryCategoryForCourse).
  - Chọn cột cụ thể để giảm tải xử lý.
- Output: { id, name, slug, description, parent_id, display_order, is_active }.

4.13. Lấy khóa học theo danh mục (/api/courses/category/:categoryId)
- Input: :categoryId, Query params { page, limit, include_subcategories? }.
- Xử lý:
  - Truy vấn bảng course_categories và courses để lấy khóa học (getCoursesForCategory).
  - Nếu include_subcategories = true, lấy thêm khóa học từ danh mục con.
  - Hỗ trợ phân trang.
- Output: { courses: [{ id, title, ... }], total: number }.

4.14. Thống kê số lượng khóa học (/api/categories/counts)
- Input: None.
- Xử lý:
  - Truy vấn số lượng khóa học trong mỗi danh mục (getCategoryCounts).
  - Sử dụng JOIN hiệu quả để giảm thời gian xử lý.
- Output: { counts: [{ category_id, name, course_count }] }.

5. Nguyên tắc thiết kế cấu trúc dự án

- Modularity: Tách biệt các thành phần (routes, controllers, services, models) để dễ bảo trì.
- Scalability: Cấu trúc hỗ trợ thêm model và tính năng mới mà không làm rối codebase.
- Separation of Concerns: Mỗi lớp (layer) xử lý một trách nhiệm cụ thể (routes định tuyến, controllers xử lý logic HTTP, services xử lý logic nghiệp vụ, models tương tác với database).
- Reusability: Các thành phần như middleware, utilities được tái sử dụng.

6. Nguyên tắc khi kết hợp Swagger
- Mục tiêu: Swagger (OpenAPI Specification) phải phản ánh chính xác các endpoint, request/response schema, và trạng thái của API.
- Nguyên tắc:
  - Tự động hóa tài liệu: Sử dụng các thư viện như swagger-jsdoc hoặc swagger-ui-express để tạo tài liệu Swagger trực tiếp từ mã nguồn (comments JSDoc trong Express.js).
  - Đồng bộ hóa với mã: Đảm bảo mọi thay đổi trong API (thêm endpoint, cập nhật schema) được phản ánh ngay lập tức trong tài liệu Swagger.
