1. Danh sách nghiệp vụ (Business Requirements)
Dựa trên Course Model và các phương thức được mô tả trong tài liệu (initCourseTable, createCourse, getCourseById, updateCourse, deleteCourse, approveCourse, updateCourseStatus, getAllCoursesForModeration, getCourseCategories, getCourses, getCoursesByInstructorId, searchCourses, getRecommendedCourses), các nghiệp vụ cần thực hiện bao gồm:

- Tạo khóa học mới (Create Course):
  - Cho phép giảng viên tạo khóa học với thông tin cơ bản (title, description, instructor_id, price, thumbnail, thumbnail_public_id, is_published, is_approved, categories).
  - Liên kết khóa học với một hoặc nhiều danh mục.
  - Chỉ giảng viên được phép thực thi.

- Lấy thông tin khóa học (Get Course Info):
  - Lấy thông tin khóa học theo ID, bao gồm danh mục liên kết.
  - Hỗ trợ truy cập công khai (không yêu cầu xác thực) để hiển thị trên front-end.

- Cập nhật khóa học (Update Course):
  - Cập nhật thông tin khóa học như tiêu đề, mô tả, giá, hình ảnh, trạng thái xuất bản, hoặc danh mục.
  - Chỉ giảng viên sở hữu khóa học hoặc admin được phép thực thi.

- Xóa khóa học (Delete Course):
  - Xóa khóa học và các dữ liệu liên quan (danh mục, section, lesson).
  - Chỉ giảng viên sở hữu khóa học hoặc admin được phép thực thi.

- Duyệt khóa học (Approve Course):
  - Đặt trạng thái phê duyệt (is_approved) cho khóa học.
  - Chỉ admin được phép thực thi.
  - Gửi thông báo cho giảng viên khi khóa học được phê duyệt.

- Cập nhật trạng thái xuất bản (Update Course Status):
  - Cập nhật trạng thái xuất bản (is_published) của khóa học.
  - Chỉ giảng viên sở hữu khóa học hoặc admin được phép thực thi.

- Lấy danh sách khóa học cần duyệt (Get Courses for Moderation):
  - Lấy tất cả khóa học chưa được phê duyệt để admin xem xét.
  - Chỉ admin được phép truy cập.

- Lấy danh mục của khóa học (Get Course Categories):
  - Lấy danh sách danh mục liên kết với một khóa học.
  - Hỗ trợ truy cập công khai.

- Lấy danh sách khóa học (List Courses):
  - Lấy tất cả khóa học với phân trang và lọc (ví dụ: theo danh mục, trạng thái xuất bản).
  - Hỗ trợ truy cập công khai.

- Lấy khóa học theo giảng viên (Get Courses by Instructor):
  - Lấy danh sách khóa học của một giảng viên cụ thể.
  - Chỉ giảng viên sở hữu hoặc admin được phép truy cập.

- Tìm kiếm khóa học (Search Courses):
  - Tìm kiếm khóa học dựa trên từ khóa (title, description).
  - Hỗ trợ truy cập công khai.

- Gợi ý khóa học (Get Recommended Courses):
  - Lấy danh sách khóa học được gợi ý cho học viên dựa trên lịch sử học tập hoặc sở thích.
  - Yêu cầu xác thực JWT để cá nhân hóa gợi ý.

2. Tech Stack
Để triển khai các API này, tôi đề xuất tech stack sau, đồng bộ với User Model và Category Model, không sử dụng Redis:

- Backend:
  - Ngôn ngữ: TypeScript với Node.js (đảm bảo type safety và dễ bảo trì).
  - Framework: Express.js (nhẹ, linh hoạt, phổ biến cho REST API).
  - ORM/Database Driver:
    - sequenlize để quản lý truy vấn MySQL.
    - mysql2 cho kết nối MySQL.
  - Validation:
    - joi: Kiểm tra dữ liệu đầu vào.
  - Authentication:
    - jsonwebtoken: Tạo và xác thực JWT (cho các API yêu cầu admin/instructor).
  - File Upload:
    - Cloudinary để lưu hình ảnh thumbnail.
    - multer: Xử lý upload file trong Express.
  - Documentation:
    - swagger-jsdoc và swagger-ui-express: Tạo tài liệu OpenAPI.
    - express-openapi-validator: Validate request/response theo spec.

- Database:
  - MySQL: Dựa trên schema đã cung cấp (courses, course_categories).

3. Danh sách API chi tiết
Dưới đây là danh sách các API cho Course Model, bao gồm endpoint, phương thức HTTP, mô tả, yêu cầu xác thực, và các lưu ý tối ưu hóa.

- Endpoint: /api/courses/init
  - Method: POST
  - Description: Khởi tạo bảng courses và course_categories
  - Auth: JWT (Admin)
  - Notes: Chỉ chạy một lần, kiểm tra bảng tồn tại.

- Endpoint: /api/courses
  - Method: POST
  - Description: Tạo khóa học mới
  - Auth: JWT (Instructor)
  - Notes: Upload thumbnail lên Cloudinary, liên kết danh mục.

- Endpoint: /api/courses/:id
  - Method: GET
  - Description: Lấy thông tin khóa học theo ID
  - Auth: None
  - Notes: Tối ưu bằng cách chọn cột cụ thể.

- Endpoint: /api/courses/:id
  - Method: PUT
  - Description: Cập nhật thông tin khóa học
  - Auth: JWT (Instructor hoặc Admin)
  - Notes: Kiểm tra quyền sở hữu, upload thumbnail nếu có.

- Endpoint: /api/courses/:id
  - Method: DELETE
  - Description: Xóa khóa học
  - Auth: JWT (Instructor hoặc Admin)
  - Notes: Xóa dữ liệu liên quan (danh mục, section, lesson).

- Endpoint: /api/courses/:id/approve
  - Method: PUT
  - Description: Duyệt khóa học
  - Auth: JWT (Admin)
  - Notes: Gửi thông báo cho giảng viên.

- Endpoint: /api/courses/:id/status
  - Method: PUT
  - Description: Cập nhật trạng thái xuất bản
  - Auth: JWT (Instructor hoặc Admin)
  - Notes: Kiểm tra quyền sở hữu.

- Endpoint: /api/courses/moderation
  - Method: GET
  - Description: Lấy danh sách khóa học cần duyệt
  - Auth: JWT (Admin)
  - Notes: Hỗ trợ phân trang.

- Endpoint: /api/courses/:id/categories
  - Method: GET
  - Description: Lấy danh mục của khóa học
  - Auth: None
  - Notes: Tối ưu bằng cách chọn cột cụ thể.

- Endpoint: /api/courses
  - Method: GET
  - Description: Lấy tất cả khóa học (phân trang, lọc)
  - Auth: None
  - Notes: Hỗ trợ lọc theo danh mục, trạng thái.

- Endpoint: /api/courses/instructor/:instructorId
  - Method: GET
  - Description: Lấy khóa học của giảng viên
  - Auth: JWT (Instructor hoặc Admin)
  - Notes: Kiểm tra quyền sở hữu, hỗ trợ phân trang.

- Endpoint: /api/courses/search
  - Method: GET
  - Description: Tìm kiếm khóa học theo từ khóa
  - Auth: None
  - Notes: Tối ưu bằng full-text search nếu có.

- Endpoint: /api/courses/recommended
  - Method: GET
  - Description: Lấy khóa học được gợi ý
  - Auth: JWT
  - Notes: Dựa trên lịch sử học tập, hỗ trợ phân trang.

4. Các bước triển khai chi tiết

4.2. Tạo khóa học mới (/api/courses)
- Input: { title, description, instructor_id, price, thumbnail, is_published, is_approved, categories }.
- Xử lý:
  - Validate input bằng joi (title, instructor_id, price bắt buộc).
  - Upload thumbnail lên Cloudinary, lưu URL và public_id.
  - Thêm bản ghi vào bảng courses (createCourse).
  - Liên kết khóa học với danh mục trong bảng course_categories.
- Output: { id, title, description, instructor_id, price, thumbnail, thumbnail_public_id, is_published, is_approved, categories }.

4.3. Lấy thông tin khóa học (/api/courses/:id)
- Input: :id.
- Xử lý:
  - Truy vấn bảng courses để lấy thông tin khóa học (getCourseById).
  - Truy vấn bảng course_categories để lấy danh mục liên kết.
  - Chọn cột cụ thể để giảm tải xử lý.
- Output: { id, title, description, instructor_id, price, thumbnail, thumbnail_public_id, is_published, is_approved, categories }.

4.4. Cập nhật khóa học (/api/courses/:id)
- Input: { title, description, price, thumbnail, is_published, is_approved, categories }.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền instructor/admin và quyền sở hữu.
  - Validate input bằng joi.
  - Upload thumbnail mới lên Cloudinary nếu có.
  - Cập nhật bản ghi trong bảng courses (updateCourse).
  - Cập nhật danh mục trong bảng course_categories.
- Output: { id, title, description, instructor_id, price, thumbnail, thumbnail_public_id, is_published, is_approved, categories }.

4.5. Xóa khóa học (/api/courses/:id)
- Input: :id.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền instructor/admin và quyền sở hữu.
  - Xóa bản ghi trong bảng courses (deleteCourse).
  - Xóa liên kết trong bảng course_categories.
- Output: { message: 'Course deleted successfully' }.

4.6. Duyệt khóa học (/api/courses/:id/approve)
- Input: { is_approved }.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền admin.
  - Cập nhật trạng thái is_approved trong bảng courses (approveCourse).
  - Gửi thông báo (email hoặc in-app) cho giảng viên.
- Output: { message: 'Course approval updated' }.

4.7. Cập nhật trạng thái xuất bản (/api/courses/:id/status)
- Input: { is_published }.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền instructor/admin và quyền sở hữu.
  - Cập nhật trạng thái is_published trong bảng courses (updateCourseStatus).
- Output: { message: 'Course status updated' }.

4.8. Lấy danh sách khóa học cần duyệt (/api/courses/moderation)
- Input: Query params { page, limit }.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền admin.
  - Truy vấn bảng courses để lấy khóa học với is_approved = false (getAllCoursesForModeration).
  - Hỗ trợ phân trang.
- Output: { courses: [{ id, title, instructor_id, ... }], total: number }.

4.9. Lấy danh mục của khóa học (/api/courses/:id/categories)
- Input: :id.
- Xử lý:
  - Truy vấn bảng course_categories để lấy danh mục (getCourseCategories).
  - Chọn cột cụ thể để giảm tải xử lý.
- Output: { categories: [{ id, name, slug, ... }] }.

4.10. Lấy tất cả khóa học (/api/courses)
- Input: Query params { page, limit, category_id?, is_published? }.
- Xử lý:
  - Truy vấn bảng courses với phân trang và lọc theo category_id hoặc is_published (getCourses).
- Output: { courses: [{ id, title, instructor_id, ... }], total: number }.

4.11. Lấy khóa học theo giảng viên (/api/courses/instructor/:instructorId)
- Input: :instructorId, Query params { page, limit }.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền instructor/admin và quyền sở hữu.
  - Truy vấn bảng courses để lấy khóa học của giảng viên (getCoursesByInstructorId).
  - Hỗ trợ phân trang.
- Output: { courses: [{ id, title, instructor_id, ... }], total: number }.

4.12. Tìm kiếm khóa học (/api/courses/search)
- Input: Query params { keyword, page, limit }.
- Xử lý:
  - Truy vấn bảng courses để tìm kiếm theo title và description (searchCourses).
  - Hỗ trợ phân trang.
- Output: { courses: [{ id, title, instructor_id, ... }], total: number }.

4.13. Gợi ý khóa học (/api/courses/recommended)
- Input: Query params { page, limit }.
- Xử lý:
  - Xác thực JWT để lấy thông tin người dùng.
  - Truy vấn dựa trên lịch sử học tập hoặc sở thích (getRecommendedCourses).
  - Hỗ trợ phân trang.
- Output: { courses: [{ id, title, instructor_id, ... }], total: number }.

5. Nguyên tắc thiết kế cấu trúc dự án

- Modularity: Tách biệt các thành phần (routes, controllers, services, models) để dễ bảo trì.
- Scalability: Cấu trúc hỗ trợ thêm model và tính năng mới mà không làm rối codebase.
- Separation of Concerns: Mỗi lớp (layer) xử lý một trách nhiệm cụ thể (routes định tuyến, controllers xử lý logic HTTP, services xử lý logic nghiệp vụ, models tương tác với database).
- Reusability: Các thành phần như middleware, utilities được tái sử dụng.

6. Nguyên tắc khi kết hợp Swagger

- Mục tiêu: Swagger (OpenAPI Specification) phải phản ánh chính xác các endpoint, request/response schema, và trạng thái của API.
- Nguyên tắc:
  - Tự động hóa tài liệu: Sử dụng các thư viện như swagger-jsdoc hoặc swagger-ui-express để tạo tài liệu Swagger trực tiếp từ mã nguồn (comments JSDoc trong Express.js).
  - Đồng bộ hóa với mã: Đảm bảo mọi thay đổi trong API (thêm endpoint, cập nhật schema) được phản ánh ngay lập tức trong tài liệu Swagger.
