1. Danh sách nghiệp vụ (Business Requirements)
Dựa trên Enrollment Model và các phương thức được mô tả trong tài liệu (createEnrollment, getEnrollmentById, isUserEnrolled, getUserEnrollments, getStudentEnrollments, getCourseEnrollments, getCourseRevenue, getStudentCountByInstructor, getMostPopularCourses), các nghiệp vụ cần thực hiện bao gồm:

- Tạo đăng ký khóa học (Create Enrollment):
  - Cho phép học viên đăng ký một khóa học sau khi thanh toán thành công.
  - Kiểm tra xem học viên đã đăng ký khóa học trước đó chưa.
  - Yêu cầu xác thực JWT và liên kết với thanh toán.

- Lấy thông tin đăng ký (Get Enrollment Info):
  - Lấy thông tin đăng ký theo ID.
  - Hỗ trợ truy cập bởi học viên, giảng viên sở hữu khóa học, hoặc admin.

- Kiểm tra trạng thái đăng ký (Is User Enrolled):
  - Kiểm tra xem một học viên đã đăng ký một khóa học cụ thể chưa.
  - Yêu cầu xác thực JWT.

- Lấy danh sách khóa học của học viên (Get User Enrollments):
  - Lấy tất cả khóa học mà học viên đã đăng ký.
  - Yêu cầu xác thực JWT, hỗ trợ phân trang.

- Lấy danh sách đăng ký của học viên (Get Student Enrollments):
  - Lấy danh sách đăng ký của học viên với phân trang và lọc (ví dụ: theo khóa học, ngày đăng ký).
  - Chỉ admin được phép truy cập.

- Lấy danh sách học viên của khóa học (Get Course Enrollments):
  - Lấy tất cả học viên đã đăng ký một khóa học cụ thể.
  - Chỉ giảng viên sở hữu khóa học hoặc admin được phép truy cập, hỗ trợ phân trang.

- Tính doanh thu khóa học (Get Course Revenue):
  - Tính tổng doanh thu từ một khóa học dựa trên các đăng ký.
  - Chỉ giảng viên sở hữu khóa học hoặc admin được phép truy cập.

- Đếm số học viên theo giảng viên (Get Student Count by Instructor):
  - Đếm số học viên duy nhất đã đăng ký các khóa học của một giảng viên.
  - Chỉ giảng viên hoặc admin được phép truy cập.

- Lấy khóa học phổ biến nhất (Get Most Popular Courses):
  - Lấy danh sách khóa học được sắp xếp theo số lượng đăng ký.
  - Hỗ trợ truy cập công khai, hỗ trợ phân trang.

2. Tech Stack
Để triển khai các API này, tôi đề xuất tech stack sau, đồng bộ với User Model, Category Model, Course Model, Section Model, và Lesson Model, không sử dụng Redis:

- Backend:
  - Ngôn ngữ: TypeScript với Node.js (đảm bảo type safety và dễ bảo trì).
  - Framework: Express.js (nhẹ, linh hoạt, phổ biến cho REST API).
  - ORM/Database Driver:
    - Sequenlize để quản lý truy vấn MySQL.
    - mysql2 cho kết nối MySQL.
  - Validation:
    - joi: Kiểm tra dữ liệu đầu vào.
  - Authentication:
    - jsonwebtoken: Tạo và xác thực JWT (cho các API yêu cầu admin/instructor/student).
  - Documentation:
    - swagger-jsdoc và swagger-ui-express: Tạo tài liệu OpenAPI.
    - express-openapi-validator: Validate request/response theo spec.

- Database:
  - MySQL: Dựa trên schema đã cung cấp (enrollments).

3. Danh sách API chi tiết
Dưới đây là danh sách các API cho Enrollment Model, bao gồm endpoint, phương thức HTTP, mô tả, yêu cầu xác thực, và các lưu ý tối ưu hóa.

- Endpoint: /api/enrollments
  - Method: POST
  - Description: Tạo đăng ký khóa học
  - Auth: JWT (Student)
  - Notes: Kiểm tra thanh toán và trạng thái đăng ký trước đó.

- Endpoint: /api/enrollments/:id
  - Method: GET
  - Description: Lấy thông tin đăng ký theo ID
  - Auth: JWT (Student, Instructor, hoặc Admin)
  - Notes: Tối ưu bằng cách chọn cột cụ thể.

- Endpoint: /api/enrollments/check
  - Method: GET
  - Description: Kiểm tra trạng thái đăng ký
  - Auth: JWT (Student)
  - Notes: Tối ưu bằng cách chọn cột cụ thể.

- Endpoint: /api/enrollments/user/:userId
  - Method: GET
  - Description: Lấy danh sách khóa học của học viên
  - Auth: JWT (Student hoặc Admin)
  - Notes: Hỗ trợ phân trang, tối ưu bằng cách chọn cột cụ thể.

- Endpoint: /api/enrollments/student
  - Method: GET
  - Description: Lấy danh sách đăng ký của học viên (phân trang, lọc)
  - Auth: JWT (Admin)
  - Notes: Hỗ trợ phân trang và lọc.

- Endpoint: /api/enrollments/course/:courseId
  - Method: GET
  - Description: Lấy danh sách học viên của khóa học
  - Auth: JWT (Instructor hoặc Admin)
  - Notes: Hỗ trợ phân trang, tối ưu bằng cách chọn cột cụ thể.

- Endpoint: /api/enrollments/revenue/:courseId
  - Method: GET
  - Description: Tính doanh thu khóa học
  - Auth: JWT (Instructor hoặc Admin)
  - Notes: Tối ưu bằng cách sử dụng JOIN hiệu quả.

- Endpoint: /api/enrollments/instructor/:instructorId/students
  - Method: GET
  - Description: Đếm số học viên theo giảng viên
  - Auth: JWT (Instructor hoặc Admin)
  - Notes: Tối ưu bằng cách sử dụng JOIN hiệu quả.

- Endpoint: /api/enrollments/popular
  - Method: GET
  - Description: Lấy khóa học phổ biến nhất
  - Auth: None
  - Notes: Hỗ trợ phân trang, tối ưu bằng cách sử dụng JOIN hiệu quả.

4. Các bước triển khai chi tiết

4.1. Tạo đăng ký khóa học (/api/enrollments)
- Input: { user_id, course_id }.
- Xử lý:
  - Validate input bằng zod (user_id, course_id bắt buộc).
  - Kiểm tra học viên đã đăng ký khóa học trước đó (isUserEnrolled).
  - Kiểm tra thanh toán thành công (liên kết với Payment Model).
  - Thêm bản ghi vào bảng enrollments (createEnrollment).
- Output: { id, user_id, course_id, created_at }.

4.2. Lấy thông tin đăng ký (/api/enrollments/:id)
- Input: :id.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền (học viên, giảng viên sở hữu khóa học, hoặc admin).
  - Truy vấn bảng enrollments để lấy thông tin đăng ký (getEnrollmentById).
  - Chọn cột cụ thể để giảm tải xử lý.
- Output: { id, user_id, course_id, created_at }.

4.3. Kiểm tra trạng thái đăng ký (/api/enrollments/check)
- Input: Query params { user_id, course_id }.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền học viên.
  - Truy vấn bảng enrollments để kiểm tra trạng thái (isUserEnrolled).
  - Chọn cột cụ thể để giảm tải xử lý.
- Output: { enrolled: boolean }.

4.4. Lấy danh sách khóa học của học viên (/api/enrollments/user/:userId)
- Input: :userId, Query params { page, limit }.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền (học viên hoặc admin).
  - Truy vấn bảng enrollments để lấy danh sách khóa học (getUserEnrollments).
  - Hỗ trợ phân trang.
  - Chọn cột cụ thể để giảm tải xử lý.
- Output: { enrollments: [{ id, user_id, course_id, created_at }], total: number }.

4.5. Lấy danh sách đăng ký của học viên (/api/enrollments/student)
- Input: Query params { page, limit, course_id?, start_date?, end_date? }.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền admin.
  - Truy vấn bảng enrollments với phân trang và lọc (getStudentEnrollments).
- Output: { enrollments: [{ id, user_id, course_id, created_at }], total: number }.

4.6. Lấy danh sách học viên của khóa học (/api/enrollments/course/:courseId)
- Input: :courseId, Query params { page, limit }.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền (giảng viên sở hữu khóa học hoặc admin).
  - Truy vấn bảng enrollments để lấy danh sách học viên (getCourseEnrollments).
  - Hỗ trợ phân trang.
  - Chọn cột cụ thể để giảm tải xử lý.
- Output: { enrollments: [{ id, user_id, course_id, created_at }], total: number }.

4.7. Tính doanh thu khóa học (/api/enrollments/revenue/:courseId)
- Input: :courseId.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền (giảng viên sở hữu khóa học hoặc admin).
  - Truy vấn bảng enrollments và payments để tính tổng doanh thu (getCourseRevenue).
  - Sử dụng JOIN hiệu quả để lấy dữ liệu.
- Output: { course_id, revenue: number }.

4.8. Đếm số học viên theo giảng viên (/api/enrollments/instructor/:instructorId/students)
- Input: :instructorId.
- Xử lý:
  - Xác thực JWT, kiểm tra quyền (giảng viên hoặc admin).
  - Truy vấn bảng enrollments và courses để đếm số học viên duy nhất (getStudentCountByInstructor).
  - Sử dụng JOIN hiệu quả để lấy dữ liệu.
- Output: { instructor_id, student_count: number }.

4.9. Lấy khóa học phổ biến nhất (/api/enrollments/popular)
- Input: Query params { page, limit }.
- Xử lý:
  - Truy vấn bảng enrollments và courses để lấy khóa học theo số lượng đăng ký (getMostPopularCourses).
  - Hỗ trợ phân trang.
  - Sử dụng JOIN hiệu quả để lấy dữ liệu.
- Output: { courses: [{ course_id, title, enrollment_count }], total: number }.

5. Nguyên tắc thiết kế cấu trúc dự án

- Modularity: Tách biệt các thành phần (routes, controllers, services, models) để dễ bảo trì.
- Scalability: Cấu trúc hỗ trợ thêm model và tính năng mới mà không làm rối codebase.
- Separation of Concerns: Mỗi lớp (layer) xử lý một trách nhiệm cụ thể (routes định tuyến, controllers xử lý logic HTTP, services xử lý logic nghiệp vụ, models tương tác với database).
- Reusability: Các thành phần như middleware, utilities được tái sử dụng.
- Configuration: Tách biệt cấu hình môi trường (development, production) để dễ triển khai.

6. Nguyên tắc khi kết hợp Swagger

- Mục tiêu: Swagger (OpenAPI Specification) phải phản ánh chính xác các endpoint, request/response schema, và trạng thái của API.
- Nguyên tắc:
  - Tự động hóa tài liệu: Sử dụng các thư viện như swagger-jsdoc hoặc swagger-ui-express để tạo tài liệu Swagger trực tiếp từ mã nguồn (comments JSDoc trong Express.js).
  - Đồng bộ hóa với mã: Đảm bảo mọi thay đổi trong API (thêm endpoint, cập nhật schema) được phản ánh ngay lập tức trong tài liệu Swagger.
  - Xác thực schema: Sử dụng các công cụ như express-openapi-validator để kiểm tra tính hợp lệ của request/response so với định nghĩa trong Swagger.