# Payment Model

## Overview

The Payment model handles financial transactions for course purchases, including payment processing, status tracking, and refund management.

## Schema

```typescript
interface Payment {
  id?: number;
  user_id: number;
  course_id: number;
  amount: number;
  currency: string;
  payment_method: "credit_card" | "paypal" | "stripe" | "bank_transfer";
  transaction_id?: string;
  status: "pending" | "completed" | "failed" | "refunded";
  created_at?: Date;
  updated_at?: Date;
}

interface Refund {
  id?: number;
  payment_id: number;
  amount: number;
  reason: string;
  status: "pending" | "completed" | "failed";
  transaction_id?: string;
  created_at?: Date;
}
```

## Database Table: payments

```sql
CREATE TABLE IF NOT EXISTS payments (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT NOT NULL,
  course_id INT NOT NULL,
  amount DECIMAL(10, 2) NOT NULL,
  currency VARCHAR(3) NOT NULL DEFAULT 'USD',
  payment_method ENUM('credit_card', 'paypal', 'stripe', 'bank_transfer') NOT NULL,
  transaction_id VARCHAR(255),
  status ENUM('pending', 'completed', 'failed', 'refunded') NOT NULL DEFAULT 'pending',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE
);
```

## Database Table: refunds

```sql
CREATE TABLE IF NOT EXISTS refunds (
  id INT AUTO_INCREMENT PRIMARY KEY,
  payment_id INT NOT NULL,
  amount DECIMAL(10, 2) NOT NULL,
  reason TEXT NOT NULL,
  status ENUM('pending', 'completed', 'failed') NOT NULL DEFAULT 'pending',
  transaction_id VARCHAR(255),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (payment_id) REFERENCES payments(id) ON DELETE CASCADE
);
```

## Methods

- `createPayment`: Creates a new payment record.
- `getPaymentById`: Retrieves a payment by its ID.
- `getUserPayments`: Gets all payments made by a specific user.
- `getCoursePayments`: Gets all payments for a specific course.
- `updatePaymentStatus`: Updates the status of a payment.
- `processRefund`: Initiates a refund for a payment.
- `getTotalRevenue`: Calculates the total revenue generated by the platform.
- `getRevenueByTime`: Gets revenue data grouped by time periods (e.g., daily, monthly).
- `getRevenueStatistics`: Provides statistical insights into revenue trends.
- `getInstructorRevenue`: Calculates revenue earned by a specific instructor.
- `getHighestRevenueCourses`: Identifies courses that have generated the most revenue.
